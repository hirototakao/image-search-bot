import { FunctionsCompleteErrorResponse, FunctionsCompleteSuccessResponse } from '@slack/web-api';
import { Middleware, AllMiddlewareArgs, AnyMiddlewareArgs, SlackEventMiddlewareArgs } from './types';
/** Interfaces */
export interface FunctionCompleteArguments {
    outputs?: {
        [key: string]: any;
    };
}
export interface FunctionFailArguments {
    error: string;
}
export interface FunctionCompleteFn {
    (params?: FunctionCompleteArguments): Promise<FunctionsCompleteSuccessResponse>;
}
export interface FunctionFailFn {
    (params: FunctionFailArguments): Promise<FunctionsCompleteErrorResponse>;
}
export interface WorkflowFunctionExecuteMiddlewareArgs extends SlackEventMiddlewareArgs<'function_executed'> {
    complete: FunctionCompleteFn;
    fail: FunctionFailFn;
}
/** Types */
export declare type SlackWorkflowFunctionMiddlewareArgs = WorkflowFunctionExecuteMiddlewareArgs;
export declare type WorkflowFunctionExecuteMiddleware = Middleware<WorkflowFunctionExecuteMiddlewareArgs>;
export declare type WorkflowFunctionMiddleware = WorkflowFunctionExecuteMiddleware[];
export declare type AllWorkflowFunctionMiddlewareArgs<T extends SlackWorkflowFunctionMiddlewareArgs = SlackWorkflowFunctionMiddlewareArgs> = T & AllMiddlewareArgs;
/** Class */
export declare class WorkflowFunction {
    /** Function callback_id */
    callbackId: string;
    private middleware;
    constructor(callbackId: string, middleware: WorkflowFunctionMiddleware);
    getMiddleware(): Middleware<AnyMiddlewareArgs>;
    private matchesConstraints;
    private processEvent;
    private getStepMiddleware;
}
/** Helper Functions */
export declare function validate(callbackId: string, listeners: WorkflowFunctionMiddleware): void;
/**
 * `processStepMiddleware()` invokes each callback for lifecycle event
 * @param args workflow_step_edit action
 */
export declare function processStepMiddleware(args: AllWorkflowFunctionMiddlewareArgs, middleware: WorkflowFunctionMiddleware): Promise<void>;
export declare function isFunctionEvent(args: AnyMiddlewareArgs): args is AllWorkflowFunctionMiddlewareArgs;
/**
 * Factory for `complete()` utility
 * @param args function_executed event
 */
export declare function createFunctionComplete(args: AllWorkflowFunctionMiddlewareArgs<WorkflowFunctionExecuteMiddlewareArgs>): FunctionCompleteFn;
/**
 * Factory for `fail()` utility
 * @param args function_executed event
 */
export declare function createFunctionFail(args: AllWorkflowFunctionMiddlewareArgs<WorkflowFunctionExecuteMiddlewareArgs>): FunctionFailFn;
/**
 * `prepareFunctionArgs()` takes in a function's args and:
 *  1. removes the next() passed in from App-level middleware processing
 *    - events will *not* continue down global middleware chain to subsequent listeners
 *  2. augments args with step lifecycle-specific properties/utilities
 * */
export declare function prepareFunctionArgs(args: any): AllWorkflowFunctionMiddlewareArgs;
//# sourceMappingURL=WorkflowFunction.d.ts.map